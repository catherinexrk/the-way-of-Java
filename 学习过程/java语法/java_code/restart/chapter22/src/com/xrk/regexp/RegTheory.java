package com.xrk.regexp;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegTheory {
    public static void main(String[] args) {
        String content = "Spring is everywhere\n" +
        "Spring is flexible\n" +
                "Spring is productive\n" +
                "Spring is fast\n" +
                "Spring is secure\n" +
                "Spring is supportive\n" +
                "\u200BSpring是主打B/S架构的Java一站式企业级开发框架。每一个技术的出现不是一蹴而就的是经过一步步的演变而来的，Spring并不能见证Java Web的整个发展过程，但是重要的统一集大成者。这里主要介绍在Spring诞生前后以及目前Java Web开发过程中主要的技术栈体系发展过程。\n" +
                "\n" +
                "远古时代（无Spring或者同类框架）\n" +
                "静态网页：代表技术包括XML、HTML、XSLT等。1994 年，网景公司发布了 Navigator 浏览器，早期的网站不能和用户交互，只能用来展示一些信息。\n" +
                "Servlet：Servlet是Service Applet的简称，可以用来处理用户请求，并且输出返回结果到页面可以实现用户和网站的交互功能。Servlet也在不同时期的JavaEE规范中不断完善。\n" +
                "JSP：全称为Java Server Pages，Sun公司借鉴微软的asp作为Java Web应用的视图层，其本质仍为Servlet，但是区别在于JSP更加专注于视图渲染。\n" +
                "Model1：通过JSP、JavaBean来实现，已经对代码进行了简单的分层，JSP可以直接编写HTML DOM和JavaScript代码，并且借助el和jstl表达式直接获取到9大内置对象的值，使得前后端之间的交互更为灵活，但是大量的前后端代码耦合使得后期维护异常困难，需要开发人员同时熟悉前后端技术，对开发人员要求较高。\n" +
                "Model2：通过JSP、JavaBean、Servlet来实现，已经具有MVC分层概念了JSP作为V，JavaBean作为M，Servlet作为C，实现了代码的解耦，更加易于扩展。这里要区分三层（业务逻辑层、数据持久化层和表现层）架构与MVC，不能混为一谈，表现层又分为模型、视图和控制器，对应MVC。\n" +
                "Struts1/XWork/WebWork：这几个之所以放到一块，是因为有很多相似的地方，这是比较早期的控制层框架了，WebWork建立在xWork之上，Struts1与Servlet API耦合较深，表现层技术单一，WebWork已经支持更多的视图层技术，如FreeMarker和XSLT，并且可以通过OGNL表达式访问栈值。\n" +
                "Struts2：Apache赞助的 一个开源项目，整合Struts1、WebWork优势，Struts2采用了WebWork的设计核心，使用拦截器来处理用户请求，从而允许用户的业务逻辑控制器与Servlet API分离，达到深层解耦的目的，Struts2控制器组件是Struts2框架的核心，所有MVC框架都是由控制器组件为核心的。Struts2的控制器由FilterDispatcher和业务控制器Action两部分组成，每一个用户拦截器通过继承实现。\n" +
                "Hibernate诞生在2001年11月，一个基于JPA规范的ORM框架，让程序员只关心对象之间的关联关系，忽略SQL语句，自动生成相关的SQL，因其上手难度高，功能体系庞大，在发展过程中逐渐被半自动ORM框架Mybatis（早期名称ibatis）占据了一部分市场，至此Java的开发已经逐步进入框架时代，等待着Spring带来的大一统时代。\n" +
                "Spring时代（进入人人都是Spring程序员时代）\n" +
                "SSH：指的是以Spring、Struts2、Hibernate为核心技术栈的web应用技术框架，也可以继续借助Spring强大的整合能力来引入第三方依赖框架。\n" +
                "SSM：指的是以Spring，SpringMVC，Mybatis为核心技术体系的Web应用技术栈。相比于SSH框架，无论是Struts2的设计，基于类的请求拦截，还是全ORM映射的Hibernate，这些元素都过于重量，不适合瞬息万变的互联网环境，需要更加建议轻量级的实现方式来替代，因此诞生了SSM，SpringMVC有着Spring的天然优越性，SpringMVC容器是Spring容器的子容器，子容器可以共享父容器的Bean，并且基于方法的SpringMVC缓存在处理大量并发请求的场景下更具有优势，Mybatis更加是和复杂查询场景，而实际业务场景中也是如此，这也降低了使用Hibernate的门槛成本。\n" +
                "Spring Boot：即便SSM已经简化了在Struts2和Hibernate中复杂的配置关系，但是传统的Web项目依然存在大量的配置项，从web.xml到applicationContext.xml，再到SpringMVC等第三方xml，依然需要大量配置，仍有一定的学习成本，SpringBoot简化配置，根据常用的开发经验，简化maven依赖（即spring-boot-starter-和-spring-boot-starter），总结了一套体系化配置参数，约定大于配置（即application.properties和application.yml），并且内置Tomcat（SpringBoot2.x中已经切换到了undertow，拥有更高的并发处理能力）真正做到了一键启动。\n" +
                "Spring Cloud NetFlix：基于Spring Boot强大的配置能力，传统项目在处理一个业务复杂的系统时候，体量巨大，不便于需求迭代和业务开发，牵一发而动全身，部署应用时也需要更大的内存、CPU等资源消耗，因此可以对一个复杂的项目进行拆分，在业务场景上做到服务分治，在技术方案中利用Spring Boot快速构建，相得益彰，Spring Cloud诞生了。Spring Cloud并不特指某个具体的技术，而是一系列现有成熟技术的整合，官方的解释就是SpringBoot构建一切，Spring Cloud协调一切。Spring Cloud NetFlix是由NetFlix公司开源的一套微服务组件库，包含常见的微服务组件。\n" +
                "Eureka 基于AP的服务发现\n" +
                "Zuul 网关组件\n" +
                "Hystrix 熔断、限流组件\n" +
                "Ribbon 负载均衡\n" +
                "Feign 远程调用\n" +
                "Zipkin 链路追踪\n" +
                "Config 配置中心\n" +
                "随着微服务的发展，这些组件也许不是最好的解决方案，但是依然是一套完善的生态体系，可以应对大部分的业务场景。\n" +
                "\n" +
                "Spring Cloud AliBaba：同样提供了一站式的分布式应用解决方案，属于现在比较热门，先进的微服务解决方案，基于微服务的思想，提供了更好用的组件库，常见组件包含。\n" +
                "Nacos 整合服务发现和配置中心，支持AP和CP场景\n" +
                "Sentinel 哨兵，更为优越的限流解决方案\n" +
                "更多基于Spring Cloud的微服务解决方案，当然也有其他的微服务解决方案，比如k8s本身就可以作为微服务解决方案，还有Zero Ice，Apache ServiceComb等。\n" +
                "未来发展\n" +
                "展望未来（以容器化、云原生、反应式为关键特征）\n" +
                "Quarkus\n" +
                "Spring Native\n" +
                "kubernetes\n" +
                "随着容器化技术Docker、Kubernetes，让云原生似乎成为了未来的发展方向，云原生（Cloud-Native）这个概念最早由Pivotal公司的Matt Stine于2013年首次提出，提到云原生首先想到的关键词可能就是容器化、微服务、Lambda，服务网格等，当然这些是必要元素，但是不代表拥有这些元素就是云原生应用，很多应用的部署只能说是基于云来完成，比如私有云、公有云，这也是未来的趋势。云原生本质上不是部署，而是以什么方式来构建应用，云原生的最终目的是为了提高开发效率，提升业务敏捷度、扩容性、可用性、资源利用率，降低成本。 \u200B\n" +
                "\n" +
                "个人认为，未来应用发展不应该像Spring Cloud时代过分关注于组件的功能，组件的本身是服务于业务场景的，而组件更应该依托于容器化部署方式来实现其功能，在这一点上来说Spring的脚步对比Quarkus确实略慢一筹，期待未来百花齐放的云原生时代。\n" +
                "\n" +
                "架构发展\n" +
                "互联网如今也在深刻的影响着人们的生活，无处不在，不仅拉近了人们之间的距离，也在影响着人们的交流方式、生活方式等等。互联网快速发展的同时网站的技术架构也经历了无数次的迭代，从简单到复杂。按照演变过程来说可以大致分为三个阶段，这也是网站由小到大的一个过程。\n" +
                "\n" +
                "单一架构\n" +
                "集群架构\n" +
                "分布式架构\n" +
                "单一架构\n" +
                "没有一个网站上线初期就会拥有庞大体量的用户，只不过在信息爆炸的今天这个过程可能会在不断缩短，比如抖音等短视频软件的快速扩展。就拿庞大的电商平台淘宝来说，也是经历了近十几年的发展，从一个功能单一的小网站，发展到今天巨无霸的体量，感兴趣的可以看一下《淘宝技术这十年》，带你认识一个巨型网站从小到大，从简单到复杂的过程。 在单一架构时代，不需要太多的服务器，也不需要过多的中间件来支持，往往依赖简单的技术栈体系就能支撑一个网站的运行，早期也诞生过不少优秀的组合，甚至今天依然也在沿用。\n" +
                "\n" +
                "LNMP/WAMP LNMP一般指Linux、Nginx、MySQL、PHP，WAMP一般指Windows、Apache、MySQL、PHP，这种网站体系机构简单，单服务器可以部署所有资源（all in one），部署方便有很多现成的镜像包，一键启动建站的作用，区别的就是前者支持Linux环境，后者运行在Windows环境，Nginx和Apache都是静态服务器，处理一些简单嵌入式脚本语言，适用于业务简单、用户体量小的网站。\n" +
                "\n" +
                "Tomcat + DB，这种架构Tomcat作为动态服务器，不仅可以处理静态资源，也可以处理动态资源，适用于更复杂一些的业务场景，这里的DB指的是不限于MySQL如Oracle、DB2、SQLServer等常见关系型数据库。一般使用这种架构就有必要对部署服务器进行拆分，如把服务器资源分为应用服务器和DB服务器。\n" +
                "\n" +
                "集群架构\n" +
                "当网站发展到一定规模，用户数量增多，相应的服务器也要进行扩增，如果业务流程相对不复杂的场景，不过多考虑业务代码的维护，只需要对服务器资源进行扩容，增加服务器数量即可，这个时候服务器的维护成本将会提高，对于一些经常访问的数据可以使用缓存服务器来降低关系型数据库的压力，对于关系西数据库可以采取读写分离达到高可用（HA）的目的，对于业务产生的文件可以增加共享文件服务器，降低应用服务器的磁盘压力。 当然这里只是简单描绘了集群架构的一种模式，实际业务场景可能更为复杂，技术涉及到细节实现往往会有更多的问题需要处理，以上所描述的集群模式仅在传统单一架构模式对服务器横向扩容，所有的业务依然冗余在一块，很有可能存在牵一发而动全身的影响，比如某一个功能点的用户访问激增从而拖垮整个服务，而扩容只能进行整体扩容，浪费较多的服务器资源，不能进行有针对性的扩容，难以实现弹性伸缩。\n" +
                "\n" +
                "\n" +
                "分布式架构\n" +
                "分布式架构更侧重于部署形式，微服务架构更侧重于应用架构，在微服务出现之前还有一种传统SOA架构，面向服务架构（SOA）是一个组件模型，它将应用程序的不同功能单元（称为服务）进行拆分，并通过这些服务之间定义良好的接口和协议联系起来，发展至今这种传统的SOA架构似乎已经过时，微服务架构成为各企业热衷的潮流。相对于单体架构而言，微服务架构体现在微，如何拆分就成了关键。一般会对业务进行水平拆分和垂直拆分。\n" +
                "\n" +
                "垂直拆分\n" +
                "对业务的不同进行分类，不同的业务划分到不同的应用和数据库中。这种拆分往往是根据系统的改造，将原来的功能模块按照更加细粒度的拆分成多个弱耦合的服务。\n" +
                "\n" +
                "水平拆分\n" +
                "数据库层面的水平拆分，就是将一个数据表中的数据按照某种规则分化到不同的数据库中，也就是分库分表。应用层面的水平拆分，最经典的就是将整个应用分层。数据库访问层和业务逻辑层拆分、网关层和业务逻辑层拆分等等。 \u200B\n" +
                "\n" +
                "更为精细的可以参考AKF原则进行服务拆分，AKF 立方体也叫做scala cube，它在《The Art of Scalability》一书中被首次提出，旨在提供一个系统化的扩展思路，AKF 把系统扩展分为三个维度。\n" +
                "\n" +
                "X 轴：直接水平复制应用进程来扩展系统。\n" +
                "Y 轴：将功能拆分出来扩展系统。\n" +
                "Z 轴：基于用户信息扩展系统。\n" +
                "这里就不再展开描述，有兴趣的可以搜索相关资料。 微服务架构体系最明显的特征就是前后端分离，服务之间通过RPC调用，分工明确职责单一。\n" +
                "\n" +
                "\n" +
                "参考资料：\n" +
                "\n" +
                "微服务理论：https://martinfowler.com/articles/microservices.html\n" +
                "《深入JVM虚拟机第三版》\n" +
                "编辑于 2022-09-08 20:19\n" +
                "Java 发展前景\n" +
                "\u200B赞同 30\u200B\n" +
                "\u200B5 条评论\n" +
                "\u200B分享\n" +
                "\u200B喜欢\n" +
                "\u200B收藏\n" +
                "\u200B申请转载\n" +
                "\u200B\n" +
                "\n" +
                "欢迎参与讨论\n" +
                "\n" +
                "5 条评论\n" +
                "默认\n" +
                "最新\n" +
                "铜盂忠诚汽修\n" +
                "铜盂忠诚汽修\n" +
                "全而精!\n" +
                "2022-11-02\n" +
                "\u200B回复\n" +
                "\u200B1\n" +
                "Mini鲲\n" +
                "Mini鲲\n" +
                "写的真好啊\n" +
                "01-13\n" +
                "\u200B回复\n" +
                "\u200B喜欢\n" +
                "星光\n" +
                "星光\n" +
                "作者\n" +
                "\n" +
                "谢谢，有需要可以关注下博客园Starsray，知乎上没什么内容呢还。\n" +
                "01-14\n" +
                "\u200B回复\n" +
                "\u200B喜欢\n" +
                "烟雨平生\n" +
                "烟雨平生\n" +
                "大佬牛皮\n" +
                "2023-08-16\n" +
                "\u200B回复\n" +
                "\u200B喜欢\n" +
                "甜蜜果子酱\n" +
                "甜蜜果子酱\n" +
                "太全了，赞\uD83D\uDC4D\n" +
                "2023-07-20\n" +
                "\u200B回复\n" +
                "\u200B喜欢\n" +
                "文章被以下专栏收录\n" +
                "Java\n" +
                "Java\n" +
                "推荐阅读\n" +
                "走Java技术这条路，归途是什么？\n" +
                "在Java程序界流行着一种默认的说法叫“黄金5年”，也就是一个程序员从入职的时候算起，前五年的选择直接影响着整个职业生涯中的职业发展方向和薪资走向。 如何走好这5年，彻底从一个刚入行…\n" +
                "\n" +
                "技术改变命运\n" +
                "Java程序员的4个职业发展方向，该如何把握黄金5年？\n" +
                "Java程序员的4个职业发展方向，该如何把握黄金5年？\n" +
                "里奥ii\n" +
                "发表于Java学...\n" +
                "带你了解Java的历史及发展\n" +
                "带你了解Java的历史及发展\n" +
                "猿生进阶\n" +
                "发表于java高...\n" +
                "摔到老三的 Java，未来在哪？\n" +
                "2021 年 Java 相关技术的发展趋势之前看过国外一家公司（Eversoft）于去年 12 月的技术分享，提出了 2021 年 Java 的 5 个发展趋势，分享给大家~ 1. Java 版本根据 JetBrains 公司的调查，…\n" +
                "\n" +
                "码农出击\n" +
                "\n" +
                "\n" +
                "选择语言\n";
        String regStr = "\\d\\d\\d\\d";

        Pattern pattern = Pattern.compile(regStr);

        //创建匹配器
        //创建匹配器，按照正则表达式规则去匹配content字符串
        Matcher matcher = pattern.matcher(content);


        //match find
        while (matcher.find()){
            System.out.println("找" + matcher.group(0));
        }
    }
}
